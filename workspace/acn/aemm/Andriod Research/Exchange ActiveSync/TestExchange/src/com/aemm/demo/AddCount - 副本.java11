package com.aemm.demo;

import java.io.IOException;
import com.android.email.Email;
import com.android.email.ExchangeUtils;
import com.android.email.mail.store.ExchangeStore;
import com.android.email.provider.EmailContent;
import com.android.email.provider.EmailContent.Account;
import com.android.email.provider.EmailContent.AccountColumns;
import com.android.email.provider.EmailContent.HostAuth;
import android.accounts.AccountManagerCallback;
import android.accounts.AccountManagerFuture;
import android.accounts.AuthenticatorException;
import android.accounts.OperationCanceledException;
import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;

import android.widget.Toast;






public class AddCount extends Activity {
	 public void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.addcount);
	        findviews();
	       
	   
	 }
	 private EditText Edit_address;
	 private EditText Edit_password;
	 private EditText Edit_domain;
	 private EditText Edit_serveraddress;
	 private Button btn_next;
	 private CheckBox ch_ssl;
	 
	 private String strName;
	 private String strPassword;
	 private String strDomain;
	 private String strServerAddress;
	 public  static  boolean isSsl;
	 public EmailContent.Account account1;
	 
	 private void findviews()
	 {
		 btn_next = (Button)findViewById(R.id.next);
		 Edit_address = (EditText)findViewById(R.id.address);
		 Edit_password = (EditText)findViewById(R.id.password);
		 Edit_domain = (EditText)findViewById(R.id.domain);
		 Edit_serveraddress = (EditText)findViewById(R.id.server);
		 ch_ssl = (CheckBox)findViewById(R.id.checkbox_ssl);
		
		
		 btn_next.setOnClickListener(nextListener);
	 }
	 
	 private void setAccount()
	 {
		
		 	Log.d("set account", "name:" +strName + "domain:" + strDomain);
		 	account1 = TestSetupAccount(strName,strDomain, false, this);
	        // add hostauth data, which should be saved the first time
	        account1.mHostAuthRecv = TestSetupHostAuth("eas",strServerAddress,strName,strDomain,strPassword,isSsl, false,
	        		this);
	        account1.mHostAuthSend = TestSetupHostAuth("eas",strServerAddress,strName,strDomain,strPassword, isSsl, false,
	        		this);
	        Log.d(Email.LOG_TAG, "Begin check of incoming email settings");
	        //
	        // run backups
	        account1.mFlags |= Account.FLAGS_INCOMPLETE;
	        commitSettings(this, account1);
	   
	       // AccountBackupRestore.backupAccounts(this);
	     
	        Log.d(Email.LOG_TAG, "Begin check of incoming email settings");
	        AccountManagerCallback<Bundle> mAccountManagerCallback = new AccountManagerCallback<Bundle>() {
	            public void run(AccountManagerFuture<Bundle> future) {
	                try {
	                    Bundle bundle = future.getResult();
	                    bundle.keySet();
	                    //commitSettings();
	                   // AccountBackupRestore.backupAccounts(this);
	                    finishOnDone();
	                  
	                    return;
	                } catch (OperationCanceledException e) {
	                    Log.d(Email.LOG_TAG, "addAccount was canceled");
	                } catch (IOException e) {
	                    Log.d(Email.LOG_TAG, "addAccount failed: " + e);
	                } catch (AuthenticatorException e) {
	                    Log.d(Email.LOG_TAG, "addAccount failed: " + e);
	                }
	                
	            }
	        };
	      	 ExchangeStore.addSystemAccount(this, account1,
	                     true, true, mAccountManagerCallback);
	      	 
	      	 long account1Id = account1.mId;
	         Account account2 = EmailContent.Account.restoreAccountWithId(this, account1Id);
	         
	         Log.d(Email.LOG_TAG, account2.mEmailAddress);
		
	     
		 
	 }
	 private void finishOnDone() {
	        // Clear the incomplete flag now
		 	account1.mFlags &= ~Account.FLAGS_INCOMPLETE;
	        commitSettings(this, account1);
	        Email.setServicesEnabled(this);
	       // AccountSetupNames.actionSetNames(this, mAccount.mId, mEasFlowMode);
	        // Start up SyncManager (if it isn't already running)
	        ExchangeUtils.startExchangeService(this);
	        finish();
	    }
	 private void setParameterValues()
	 {
		 strName = Edit_address.getText().toString();
		 strPassword = Edit_password.getText().toString();
		 strServerAddress = Edit_serveraddress.getText().toString();
		 strDomain = Edit_domain.getText().toString();
		 
		 
		 if (ch_ssl.isChecked())
			 isSsl = true;
		 else
			 isSsl = false;
	 }
	 public static void commitSettings(Context context, EmailContent.Account account) {
	        if (!account.isSaved()) {
	            account.save(context);
	        } else {
	            ContentValues cv = new ContentValues();
	            cv.put(AccountColumns.IS_DEFAULT, account.mIsDefault);
	            cv.put(AccountColumns.DISPLAY_NAME, account.getDisplayName());
	            cv.put(AccountColumns.SENDER_NAME, account.getSenderName());
	            cv.put(AccountColumns.SIGNATURE, account.getSignature());
	            cv.put(AccountColumns.SYNC_INTERVAL, account.mSyncInterval);
	            cv.put(AccountColumns.RINGTONE_URI, account.mRingtoneUri);
	            cv.put(AccountColumns.FLAGS, account.mFlags);
	            cv.put(AccountColumns.SYNC_LOOKBACK, account.mSyncLookback);
	            account.update(context, cv);
	        }
	        // Update the backup (side copy) of the accounts
	       // AccountBackupRestore.backupAccounts(context);
	        //we need to write preference file in /data/data/com.android.email/shared_prefs
	        //AndroidMail.Main.xml
	        //UpdateEmailPrefs(account);
	    }
	 
	 public static EmailContent.Account TestSetupAccount(String name,String domain, boolean saveIt, Context context) 
	    {
	    	EmailContent.Account account = new EmailContent.Account();

	        account.mDisplayName = name;
	        account.mEmailAddress = name +"@"+ domain;
	       // account.mSyncKey = "sync-key-" + name;
	        account.mSyncLookback = 2;
	        account.mSyncInterval = EmailContent.Account.CHECK_INTERVAL_PUSH;
	      //  account.mHostAuthKeyRecv = 0;
	      //  account.mHostAuthKeySend = 0;
	        account.mFlags = 9;
	        account.mIsDefault = true;
	       // account.mCompatibilityUuid = "test-uid-" + name;
	       // account.mSenderName = null;
	        account.mRingtoneUri = "content://ringtone-" + name;
	        account.mProtocolVersion = "12.0";
	        account.mNewMessageCount = 0;
	        account.mSecurityFlags = 0;
	        account.mSecuritySyncKey = null;
	        account.mSignature = null;
	        
	        if (!isSsl)//ticker
	        	 account.mProtocolVersion = "2.5";
	        if (saveIt) {
	            account.save(context);
	        }
	        return account;
	    }
	    public static HostAuth TestSetupHostAuth(String protocol,String server, String name,
	    		String domain,String password,boolean isSsl,boolean saveIt, Context context) 
	    {
	        HostAuth hostAuth = new HostAuth();

	        hostAuth.mProtocol = protocol;// + "-" + name;
	        hostAuth.mAddress = server;// "m.google.com";
	        hostAuth.mPort = 0;
	        hostAuth.mFlags = 5;
	        hostAuth.mLogin = domain+ "\\"+ name;
	        hostAuth.mPassword = password;//"y12345678";
	        hostAuth.mDomain =  null;
	        hostAuth.mAccountKey = 0;
	        
	        if (!isSsl)
	        	 hostAuth.mFlags = 4;
	        if (saveIt) {
	            hostAuth.save(context);
	        }
	        return hostAuth;
	    }
	    
	    private OnClickListener nextListener = new OnClickListener()
	    {
	    	public void onClick(View v)
	    	{
	    		 
	    		 Toast.makeText(AddCount.this, Edit_password.getText().toString(), Toast.LENGTH_SHORT).show();   
	    		 setParameterValues();
	       		 setAccount();
	    		// UpdateEmailPrefs(account1);
	    	}
	    };
}
