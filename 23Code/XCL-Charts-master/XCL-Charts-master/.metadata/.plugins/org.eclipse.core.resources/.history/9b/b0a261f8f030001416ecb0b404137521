package com.demo.xclcharts.view;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.xclcharts.chart.RoundBarChart;
import org.xclcharts.chart.RoundBarData;
import org.xclcharts.renderer.XChart;
import org.xclcharts.renderer.XEnum;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.util.AttributeSet;
import android.util.Log;

public class RoundBarChart01View extends TouchView {
	
	private String TAG = "PieChart01View";
	private RoundBarChart chart = new RoundBarChart();	
	private LinkedList<RoundBarData> chartData = new LinkedList<RoundBarData>();

	public RoundBarChart01View(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		initView();
	}
	
	public RoundBarChart01View(Context context, AttributeSet attrs){   
        	super(context, attrs);   
        	initView();
	 }
	 
	 public RoundBarChart01View(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
			initView();
	 }
	 
	 private void initView()
	 {
		 	chartDataSet();	
			chartRender();
	 }
	 	 	
	@Override  
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {  
        super.onSizeChanged(w, h, oldw, oldh);  
       //图所占范围大小
        chart.setChartRange(w,h);
    }  	
	
	
	private void chartRender()
	{
		try {					
			
			//设置绘图区默认缩进px值
			int [] ltrb = getPieDefaultSpadding();
			chart.setPadding(ltrb[0], ltrb[1], ltrb[2], ltrb[3]);			
			
			//设置起始偏移角度(即第一个扇区从哪个角度开始绘制)
			//chart.setInitialAngle(90);	
			
			//标签显示(隐藏，显示在中间，显示在扇区外面)
			//chart.setLabelPosition(XEnum.SliceLabelPosition.INNER);
			chart.getLabelPaint().setColor(Color.WHITE);
			
			//标题
			chart.setTitle("RoundBarChart");
			chart.addSubtitle("(XCL-Charts Demo)");
			chart.setTitleVerticalAlign(XEnum.VerticalAlign.BOTTOM);				
			
			//显示图例
			chart.getPlotLegend().showLegend();
			//chart.getPlotLegend().getLegendLabelPaint().setTextSize(22);
			//chart.showBorder();	
			
			chart.setDataSource(chartData);
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			Log.e(TAG, e.toString());
		}
	}
	

	
	private void chartDataSet()
	{
		/*
		//设置图表数据源		
		chartData.add(new RoundBarData("HP","20%",20,(int)Color.rgb(155, 187, 90)));
		chartData.add(new RoundBarData("IBM","30%",30,(int)Color.rgb(191, 79, 75),false));
		chartData.add(new RoundBarData("DELL","10%",10,(int)Color.rgb(242, 167, 69)));
		//将此比例块突出显示
		chartData.add(new RoundBarData("EMC","40%",40,(int)Color.rgb(60, 173, 213),false));
		*/

		chartData.add(new RoundBarData("closed","29%" ,   (0.09*100),(int)Color.rgb(155, 187, 90)));
		chartData.add(new RoundBarData("inspect","53%" ,   (0.03*100),(int)Color.rgb(191, 79, 75)));
		chartData.add(new RoundBarData("open","76%" ,  (0.76*100),(int)Color.rgb(242, 167, 69)));
		chartData.add(new RoundBarData("workdone","86%" , (0.06*100),(int)Color.rgb(60, 173, 213)));
		chartData.add(new RoundBarData("dispute","36%" ,  (0.06*100),(int)Color.rgb(90, 79, 88)));
	
		/*
		chartData.add(new RoundBarData("closed","7%" ,   (0.07*100),(int)Color.rgb(155, 187, 90)));
		chartData.add(new RoundBarData("inspect","19%" ,   (0.19*100),(int)Color.rgb(191, 79, 75)));
		chartData.add(new RoundBarData("open","74%" ,  (0.74*100),(int)Color.rgb(242, 167, 69)));
	
		
		chartData.add(new RoundBarData("closed","7%" ,   (0.07*100),(int)Color.rgb(155, 187, 90)));
		chartData.add(new RoundBarData("inspect","18%" ,   (0.18*100),(int)Color.rgb(191, 79, 75)));
		chartData.add(new RoundBarData("open","74%" ,  (0.74*100),(int)Color.rgb(242, 167, 69)));
		
		chartData.add(new RoundBarData("closed","36%" ,   (0.36*100),(int)Color.rgb(155, 187, 90)));
		chartData.add(new RoundBarData("inspect","16%" ,   (0.16*100),(int)Color.rgb(191, 79, 75)));
		chartData.add(new RoundBarData("open","49%" ,  (0.49*100),(int)Color.rgb(242, 167, 69)));
		*/
	}

	@Override
    public void render(Canvas canvas) {
        try{
            chart.render(canvas);
        } catch (Exception e){
        	Log.e(TAG, e.toString());
        }
    }

	@Override
	public List<XChart> bindChart() {
		// TODO Auto-generated method stub		
		List<XChart> lst = new ArrayList<XChart>();
		lst.add(chart);		
		return lst;
	}


	


	
}