package org.xclcharts.chart;

import java.util.LinkedHashMap;
import java.util.List;

import org.xclcharts.renderer.XEnum;
import org.xclcharts.renderer.line.PlotDot;

import android.graphics.Paint;

public class BubbleData {
	
	//线上每个点的值
	private LinkedHashMap<Double,Double> mPointMap ;
	private List<Double> mBubble ;	
	
	
	private Paint mLabelPaint = null;
	
	//private PlotDot mPlotDot = null;
	
	//标签轴用的到值
	private String mLabel = "";
	//是否在点上显示标签
	private boolean mLabelVisible = false;
	
	private int mColor = 0;
		
		
	
	/**
	 * 构成一条完整的线条
	 * @param key 	 对应的键值		
	 * @param dataSeries  对应的数据序列
	 * @param color  线条颜色
	 */
	public BubbleData(String key,					
						LinkedHashMap<Double,Double> dataSeries, List<Double> bubble,
						int color) {
		// TODO Auto-generated constructor stub
	
		setKey(key);			
		setDataSet(dataSeries);
	
		//getPlotDot().getDotPaint().setColor(color);		
		//getPlotDot().setDotStyle(dotStyle);		
	}	
	
	
	
	
	/**
	 * 设置绘制线的数据序列,由x与y坐标构建
	 * @param dataSeries <X坐标值，Y坐标值>
	 */
	public void setDataSet( LinkedHashMap<Double,Double>  dataSeries) 
	{
		mPointMap = dataSeries;
	}
	
	/**
	 * 返回绘制线的数据序列
	 * @return 线的数据序列<X坐标值，Y坐标值>
	 */
	public LinkedHashMap<Double,Double> getDataSet() {
		return mPointMap;
	}
	
	
	/**
	 * 设置气泡	
	 * @param bubble
	 */
	public void setBubble(List<Double>   bubble) 
	{
	 mBubble = bubble;
	}
	
	public List<Double> getBubble()
	{
		return mBubble;
	}
 
	
	/**
	 * 设置是否在线上显示标签
	 * @param visible 是否显示
	 */
	public void setLabelVisible(boolean visible) 
	{
		mLabelVisible = visible;
	}
	
	/**
	 * 返回是否在线上显示标签
	 * @return 是否显示
	 */
	public boolean getLabelVisible()
	{
		return mLabelVisible;
	}
	
	/**
	 * 设置标签
	 * @param value 标签内容
	 */
	public void setLabel(String value) 
	{
		mLabel = value;
	}
	
	/**
	 * 返回标签
	 * @return 标签
	 */
	public String getLabel() {
		return mLabel;
	}

	
	/**
	 * 设置当前记录的Key值
	 * @param value Key值
	 */
	public void setKey(String value) 
	{
		mLabel = value;
	}
	
	/**
	 * 返回Key值
	 * @return Key值
	 */
	public String getKey() {
		return mLabel;
	}
	
	/**
	 * 开放标签画笔
	 * @return 画笔
	 */
	public Paint getDotLabelPaint()
	{
		if(null == mLabelPaint) 
			mLabelPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
		
		return mLabelPaint;
	}
	
	/*
	 * 点的绘制类	
	 */
	/*
	public PlotDot getPlotDot()
	{
		if(null == mPlotDot) mPlotDot = new PlotDot();
		return mPlotDot;
	}
	*/
	
	/**
	 * 设置点的显示风格
	 * @param style 显示风格
	 */
	/*
	public void setDotStyle(XEnum.DotStyle style)
	{
		getPlotDot().setDotStyle(style);
	}
	*/
	
	/**
	 * 返回点的显示风格
	 * @return 显示风格
	 */
	/*
	public XEnum.DotStyle getDotStyle()
	{
		return getPlotDot().getDotStyle();
	}
	*/
	
	
	public void setColor(int color)
	{
		mColor = color;
	}
	
	public int getColor()
	{
		return mColor;
	}
	

}
